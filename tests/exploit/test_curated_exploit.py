import unittest
import os

from lem.exploit import CuratedExploit
from lem.exploit import SELinuxError

class TestCuratedExploitWithCpe(unittest.TestCase):
    def setUp(self):
        self.test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                           '..',
                                           'test_data')
        self.curation_dir = os.path.join(self.test_data_path, 'lem-curation')
        self.source = 'exploit-source'
        self.eid = 'one_cve'
        self.curated_exploit = CuratedExploit.from_eid(self.curation_dir, self.source, self.eid)
        self.cpe = "cpe:/o:redhat:enterprise_linux:7.0:ga:server"
        self.cpe_two = "cpe:/o:redhat:enterprise_linux:6.0:ga:server"

    def test_init(self):
        self.assertEqual(
            self.curated_exploit.location,
            os.path.join(self.curation_dir, self.source, f'{self.eid}.json'),
        )

    def test_add_existing_cpe(self):
        self.curated_exploit.add_cpe(self.cpe)
        self.assertIn(self.cpe, self.curated_exploit.cpes())
        self.assertEqual(len(self.curated_exploit.cpes()), 1)

    def test_add_non_existing_cpe(self):
        self.curated_exploit.add_cpe(self.cpe_two)
        self.assertIn(self.cpe_two, self.curated_exploit.cpes())
        self.assertEqual(len(self.curated_exploit.cpes()), 2)

    def test_existing_delete_cpe(self):
        self.curated_exploit.delete_cpe(self.cpe)
        self.assertEqual(len(self.curated_exploit.cpes()), 0)

    def test_non_existing_delete_cpe(self):
        with self.assertRaises(KeyError):
            self.curated_exploit.delete_cpe(self.cpe_two)
        self.assertEqual(len(self.curated_exploit.cpes()), 1)

    def test_modify_score(self):
        self.curated_exploit.score(self.cpe, 'stride', '000007')
        self.assertEqual(self.curated_exploit.get_score(self.cpe, 'stride'), '000007')

    def test_add_score(self):
        self.curated_exploit.conditional_read()
        self.assertEqual(len(self.curated_exploit.data['cpes'][self.cpe]['scores'].keys()), 1)
        self.curated_exploit.score(self.cpe, 'skipped', '20171112')
        self.assertEqual(self.curated_exploit.get_score(self.cpe, 'skipped'), '20171112')
        self.assertEqual(len(self.curated_exploit.data['cpes'][self.cpe]['scores'].keys()), 2)

    def test_delete_existing_score(self):
        self.curated_exploit.conditional_read()
        self.assertEqual(len(self.curated_exploit.data['cpes'][self.cpe]['scores'].keys()), 1)
        self.curated_exploit.delete_score(self.cpe, 'stride')
        self.assertEqual(len(self.curated_exploit.data['cpes'][self.cpe]['scores'].keys()), 0)

    def test_set_command(self):
        self.curated_exploit.set_command(self.cpe, 'mv a to b')
        self.assertEqual(self.curated_exploit.get_command(self.cpe), 'mv a to b')

    def test_delete_command(self):
        self.curated_exploit.delete_command(self.cpe)
        self.assertIsNone(self.curated_exploit.get_command(self.cpe))

    def test_set_packages(self):
        packages = ['gcc', 'apache']
        self.curated_exploit.set_packages(self.cpe, packages)
        self.assertListEqual(self.curated_exploit.get_packages(self.cpe), packages)

    def test_add_single_package(self):
        packages = ['gcc', 'apache']
        self.curated_exploit.set_packages(self.cpe, packages)
        self.curated_exploit.add_packages(self.cpe, 'git')
        self.assertListEqual(self.curated_exploit.get_packages(self.cpe), ['apache', 'gcc', 'git'])

    def test_add_multiple_packages(self):
        packages = ['gcc', 'apache']
        self.curated_exploit.set_packages(self.cpe, packages)
        self.curated_exploit.add_packages(self.cpe, ['gcc', 'git', 'zlib'])
        self.assertListEqual(self.curated_exploit.get_packages(self.cpe), ['apache', 'zlib', 'gcc', 'git'])

    def test_delete_multiple_packages(self):
        packages = ['apache', 'gcc']
        self.curated_exploit.set_packages(self.cpe, packages)
        self.curated_exploit.delete_packages(self.cpe, ['apache', 'gcc'])
        self.assertEqual(len(self.curated_exploit.get_packages(self.cpe)), 0)

    def test_delete_single_package(self):
        packages = ['apache', 'gcc']
        self.curated_exploit.set_packages(self.cpe, packages)
        self.curated_exploit.delete_packages(self.cpe, 'gcc')
        self.assertEqual(len(self.curated_exploit.get_packages(self.cpe)), 1)
        self.assertIn('apache', self.curated_exploit.get_packages(self.cpe))

    def test_delete_all_packages(self):
        packages = ['apache', 'gcc']
        self.curated_exploit.set_packages(self.cpe, packages)
        self.curated_exploit.delete_packages(self.cpe)
        self.assertIsNone(self.curated_exploit.get_packages(self.cpe))
    ###

    def test_set_services(self):
        services = ['gcc', 'apache']
        self.curated_exploit.set_services(self.cpe, services)
        self.assertListEqual(self.curated_exploit.get_services(self.cpe), services)

    def test_add_single_service(self):
        services = ['gcc', 'apache']
        self.curated_exploit.set_services(self.cpe, services)
        self.curated_exploit.add_services(self.cpe, 'git')
        self.assertListEqual(self.curated_exploit.get_services(self.cpe), ['apache', 'gcc', 'git'])

    def test_add_multiple_services(self):
        services = ['gcc', 'apache']
        self.curated_exploit.set_services(self.cpe, services)
        self.curated_exploit.add_services(self.cpe, ['gcc', 'git', 'zlib'])
        self.assertListEqual(self.curated_exploit.get_services(self.cpe), ['apache', 'zlib', 'gcc', 'git'])

    def test_delete_multiple_services(self):
        services = ['apache', 'gcc']
        self.curated_exploit.set_services(self.cpe, services)
        self.curated_exploit.delete_services(self.cpe, ['apache', 'gcc'])
        self.assertEqual(len(self.curated_exploit.get_services(self.cpe)), 0)

    def test_delete_single_service(self):
        services = ['apache', 'gcc']
        self.curated_exploit.set_services(self.cpe, services)
        self.curated_exploit.delete_services(self.cpe, 'gcc')
        self.assertEqual(len(self.curated_exploit.get_services(self.cpe)), 1)
        self.assertIn('apache', self.curated_exploit.get_services(self.cpe))

    def test_delete_all_services(self):
        services = ['apache', 'gcc']
        self.curated_exploit.set_services(self.cpe, services)
        self.curated_exploit.delete_services(self.cpe)
        self.assertIsNone(self.curated_exploit.get_services(self.cpe))

    def test_set_selinux(self):
        self.curated_exploit.set_selinux(self.cpe, 'permissive')
        self.assertEqual(self.curated_exploit.get_selinux(self.cpe), 'permissive')

    def test_set_bad_selinux(self):
        with self.assertRaises(SELinuxError):
            self.curated_exploit.set_selinux(self.cpe, 'no')

    def test_delete_selinux(self):
        self.curated_exploit.delete_selinux(self.cpe)
        self.assertIsNone(self.curated_exploit.get_selinux(self.cpe))


    def test_set_filename(self):
        self.curated_exploit.set_filename(self.cpe, 'test.exe')
        self.assertEqual(self.curated_exploit.get_filename(self.cpe), 'test.exe')

    def test_delete_filename(self):
        self.curated_exploit.delete_filename(self.cpe)
        self.assertIsNone(self.curated_exploit.get_filename(self.cpe))
